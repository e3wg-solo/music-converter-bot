import requests
import re
# from langdetect import detect  # –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
from yandex_music import Client
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from fuzzywuzzy import fuzz
import asyncio
from typing import Optional
import time
from supabase import create_client, Client as SupabaseClient
from datetime import datetime, timezone
import os
from dotenv import load_dotenv
import traceback

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv("API_TOKEN")
SPOTIFY_CLIENT_ID = os.getenv("SPOTIFY_CLIENT_ID")
SPOTIFY_CLIENT_SECRET = os.getenv("SPOTIFY_CLIENT_SECRET")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# SSH Configuration
SSH_HOST = os.getenv("SSH_HOST")
SSH_USERNAME = os.getenv("SSH_USERNAME")
SSH_PRIVATE_KEY = os.getenv("SSH_PRIVATE_KEY")

print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API-–∫–ª–∏–µ–Ω—Ç–æ–≤
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()
router = Router()
client = Client(YANDEX_TOKEN).init()
supabase: SupabaseClient = create_client(SUPABASE_URL, SUPABASE_KEY)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
try:
    test_response = supabase.table("requests").select("count").execute()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {str(e)}")

print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º –º–∞—Ä—à—Ä—É—Ç—ã...")

class ProxyManager:
    def __init__(self):
        proxy_string = "156.246.145.173:63732:JHS4g133:6gQdk49S"
        host, port, username, password = proxy_string.split(":")
        self.http_proxy_url = f"http://{username}:{password}@{host}:{port}"
        self.socks_proxy_url = f"socks5://{username}:{password}@{host}:{port}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç
        self.use_socks = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º SOCKS
        self.verify_proxy()
        
    def verify_proxy(self):
        try:
            print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º SOCKS5 –ø—Ä–æ–∫—Å–∏...")
            response = requests.get(
                "https://api.spotify.com/v1/ping",
                proxies={"http": self.socks_proxy_url, "https": self.socks_proxy_url},
                timeout=10
            )
            print(f"‚úÖ SOCKS5 –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –°—Ç–∞—Ç—É—Å: {response.status_code}")
            self.use_socks = True
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SOCKS5 –ø—Ä–æ–∫—Å–∏: {e}")
            print("üîÑ –ü—Ä–æ–±—É–µ–º HTTP –ø—Ä–æ–∫—Å–∏...")
            try:
                response = requests.get(
                    "https://api.spotify.com/v1/ping",
                    proxies={"http": self.http_proxy_url, "https": self.http_proxy_url},
                    timeout=10
                )
                print(f"‚úÖ HTTP –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –°—Ç–∞—Ç—É—Å: {response.status_code}")
                self.use_socks = False
            except Exception as e:
                print(f"‚ùå HTTP –ø—Ä–æ–∫—Å–∏ —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        
    def get_proxy(self):
        proxy_url = self.socks_proxy_url if self.use_socks else self.http_proxy_url
        return {
            "http": proxy_url,
            "https": proxy_url
        }

proxy_manager = ProxyManager()

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Spotify API
def get_spotify_token():
    print("üîë –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω Spotify...")
    url = "https://accounts.spotify.com/api/token"
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    data = {"grant_type": "client_credentials"}
    auth = (SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET)
    
    try:
        response = requests.post(
            url, 
            headers=headers, 
            data=data, 
            auth=auth,
            proxies=proxy_manager.get_proxy(),
            timeout=30
        )

        if response.status_code == 200:
            return response.json().get("access_token")
        
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Spotify: {response.text}")
        return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


# üîπ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –∏–∑ Spotify (–ø–æ URL)
def get_track_info(spotify_url):
    print(f"üéµ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ: {spotify_url}")
    match = re.search(r"track/([a-zA-Z0-9]+)", spotify_url)
    if not match:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å track_id –∏–∑ —Å—Å—ã–ª–∫–∏!")
        return None

    track_id = match.group(1)
    token = get_spotify_token()
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ Spotify!")
        return None

    url = f"https://api.spotify.com/v1/tracks/{track_id}"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(
            url, 
            headers=headers,
            proxies=proxy_manager.get_proxy(),
            timeout=10
        )
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Spotify API: {response.status_code}")
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API Spotify: {response.text}")
            return None
            
        data = response.json()
        
        if "error" in data:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Spotify: {data['error']}")
            return None

        if "name" in data and "artists" in data:
            artist_name = data["artists"][0]["name"]
            print(f"‚úÖ –¢—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω: {data['name']} - {artist_name}")
            return {"name": data["name"], "artist": artist_name}

        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Spotify API: {e}")
        return None


# üîπ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ
def search_yandex_music(track_name, artist_name):
    print(f"üîç –ò—â–µ–º '{track_name} - {artist_name}' –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
    results = client.search(f"{track_name} {artist_name}", type_="track")
    
    if not (results.tracks and results.tracks.results):
        # –ï—Å–ª–∏ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        results = client.search(track_name, type_="track")
    
    if results.tracks and results.tracks.results:
        # –ò—â–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –ø–µ—Ä–≤—ã—Ö 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        best_match = None
        best_score = 0
        
        for track in results.tracks.results[:10]:
            track_title = track.title.lower()
            track_artist = track.artists[0].name.lower()
            
            name_score = fuzz.ratio(track_title, track_name.lower())
            artist_score = fuzz.ratio(track_artist, artist_name.lower())
            total_score = (name_score * 0.6) + (artist_score * 0.4)
            
            if total_score > best_score:
                best_score = total_score
                best_match = track
        
        if best_match and best_score > 70:
            track_link = f"https://music.yandex.ru/album/{best_match.albums[0].id}/track/{best_match.id}"
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ: {track_link} (–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {best_score}%)")
            return track_link
    
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ '{track_name}' –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ!")
    return None


# üîπ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ (–ø–æ URL)
def get_yandex_track_info(yandex_url):
   print(f"üéµ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏: {yandex_url}")
   match = re.search(r"track/(\d+)", yandex_url)
   if not match:
       print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å track_id –∏–∑ —Å—Å—ã–ª–∫–∏!")
       return None


   track_id = match.group(1)
   try:
       track = client.tracks(track_id)[0]
       track_name = track.title
       artist_name = track.artists[0].name
       print(f"‚úÖ –¢—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω: {track_name} - {artist_name}")


       # –û–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è " - ArtistName" (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏—Ä–µ)
       pattern = re.compile(
           rf"\s*[-‚Äì‚Äî]\s*{re.escape(artist_name)}\s*$",
           re.IGNORECASE
       )
       if pattern.search(track_name):
           track_name = pattern.sub("", track_name).strip()


       return {"name": track_name, "artist": artist_name}
   except Exception as e:
       print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–∫–µ: {e}")
       return None


# üîπ –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –≤ Spotify
def search_spotify(track_name, artist_name):
    print(f"üîç –ò—â–µ–º '{track_name} - {artist_name}' –≤ Spotify...")
    token = get_spotify_token()
    if not token:
        return None

    def clean_query_term(term):
        term = re.sub(r'[&+\-\(\)]', ' ', term)
        return ' '.join(term.split())

    clean_track = clean_query_term(track_name)
    clean_artist = clean_query_term(artist_name)
    
    search_queries = [
        f"track:\"{track_name}\" artist:\"{artist_name}\"",
        f"{track_name} {artist_name}",
        f"{clean_track} {clean_artist}"
    ]
    
    best_match = None
    best_score = 0
    
    for query in search_queries:
        url = f"https://api.spotify.com/v1/search?q={requests.utils.quote(query)}&type=track&limit=50"
        headers = {"Authorization": f"Bearer {token}"}
        
        try:
            response = requests.get(
                url, 
                headers=headers,
                proxies=proxy_manager.get_proxy(),
                timeout=10
            ).json()
            
            if not response.get("tracks") or not response["tracks"]["items"]:
                continue
                
            for track in response["tracks"]["items"]:
                spotify_track_name = track["name"].lower()
                
                artist_found = False
                for artist in track["artists"]:
                    if fuzz.ratio(artist["name"].lower(), artist_name.lower()) > 85:
                        artist_found = True
                        break
                
                normalized_spotify = clean_query_term(spotify_track_name).lower()
                normalized_search = clean_query_term(track_name).lower()
                
                name_score = max(
                    fuzz.ratio(spotify_track_name, track_name.lower()),
                    fuzz.ratio(normalized_spotify, normalized_search)
                )
                
                total_score = name_score
                if artist_found:
                    total_score += 25
                
                if total_score > best_score:
                    best_score = total_score
                    best_match = track
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Spotify: {e}")
            continue

    if best_match and best_score > 70:
        track_link = best_match["external_urls"]["spotify"]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ –≤ Spotify: {track_link} (–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {best_score}%)")
        return track_link

    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!")
    return None


class Statistics:
    def __init__(self, supabase_client):
        self.supabase = supabase_client
    
    async def log_request(self, user_id, username, source_service, target_service, track_name, status, error_message=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = {
                "user_id": str(user_id),
                "username": username or "unknown",
                "source_service": source_service,
                "target_service": target_service,
                "track_name": track_name,
                "status": status,
                "error_message": error_message,
                "created_at": datetime.now(timezone.utc).isoformat()
            }
            
            print(f"üìù –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ Supabase: {data}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
            try:
                response = self.supabase.table("requests").insert(data).execute()
                print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Supabase: {response}")
                if hasattr(response, 'error') and response.error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {response.error}")
                    return None
                    
                print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω –≤ Supabase")
                return response.data
            except Exception as insert_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ insert: {str(insert_error)}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return None
    
    async def get_user_stats(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = self.supabase.table("requests")\
                .select("*")\
                .eq("user_id", str(user_id))\
                .execute()
            return response.data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return []
    
    async def get_total_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            response = self.supabase.table("requests")\
                .select("*")\
                .execute()
            
            data = response.data
            total_requests = len(data)
            successful = len([s for s in data if s['status'] == 'success'])
            failed = len([s for s in data if s['status'] == 'error'])
            not_found = len([s for s in data if s['status'] == 'not_found'])
            unique_users = len(set(s['user_id'] for s in data))
            
            return {
                "total": total_requests,
                "success": successful,
                "error": failed,
                "not_found": not_found,
                "unique_users": unique_users
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}


stats = Statistics(supabase)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---


@router.message(Command("start"))
async def start(message: types.Message):
   print("üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
   await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é –∏–∑ Spotify –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏, –∏ —è –Ω–∞–π–¥—É –µ—ë –∞–Ω–∞–ª–æ–≥ –≤ –¥—Ä—É–≥–æ–º —Å–µ—Ä–≤–∏—Å–µ.")


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ Spotify (Spotify ‚Üí –Ø–Ω–¥–µ–∫—Å)
@router.message(lambda message: "spotify.com/track" in message.text)
async def convert_spotify_to_yandex(message: types.Message):
    print(f"üîé –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {message.text}")
    await message.answer("üîé –ò—â—É –ø–µ—Å–Ω—é –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ...")

    track_info = get_track_info(message.text)
    if not track_info:
        await stats.log_request(
            user_id=message.from_user.id,
            username=message.from_user.username,
            source_service="spotify",
            target_service="yandex",
            track_name="unknown",
            status="error",
            error_message="Failed to get track info"
        )
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–µ.")
        return

    yandex_link = search_yandex_music(track_info['name'], track_info['artist'])
    if yandex_link:
        await stats.log_request(
            user_id=message.from_user.id,
            username=message.from_user.username,
            source_service="spotify",
            target_service="yandex",
            track_name=f"{track_info['name']} - {track_info['artist']}",
            status="success"
        )
        await message.answer(
            f"üéµ –ù–∞–π–¥–µ–Ω–æ!\n[{track_info['name']} ‚Äî {track_info['artist']}]({yandex_link})",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await stats.log_request(
            user_id=message.from_user.id,
            username=message.from_user.username,
            source_service="spotify",
            target_service="yandex",
            track_name=f"{track_info['name']} - {track_info['artist']}",
            status="not_found"
        )
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏\n```\n{track_info['name']} - {track_info['artist']}\n```\n–≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ.",
            parse_mode=ParseMode.MARKDOWN
        )


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –Ø–Ω–¥–µ–∫—Å (–Ø–Ω–¥–µ–∫—Å ‚Üí Spotify)
@router.message(lambda message: any(x in message.text for x in ["music.yandex.ru/track", "music.yandex.ru/album"]))
async def convert_yandex_to_spotify(message: types.Message):
    print(f"üîé –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {message.text}")
    await message.answer("üîé –ò—â—É –ø–µ—Å–Ω—é –≤ Spotify...")

    track_info = get_yandex_track_info(message.text)
    if not track_info:
        await stats.log_request(
            user_id=message.from_user.id,
            username=message.from_user.username,
            source_service="yandex",
            target_service="spotify",
            track_name="unknown",
            status="error",
            error_message="Failed to get track info"
        )
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–µ.")
        return

    spotify_link = search_spotify(track_info['name'], track_info['artist'])
    if spotify_link:
        await stats.log_request(
            user_id=message.from_user.id,
            username=message.from_user.username,
            source_service="yandex",
            target_service="spotify",
            track_name=f"{track_info['name']} - {track_info['artist']}",
            status="success"
        )
        await message.answer(
            f"üéµ –ù–∞–π–¥–µ–Ω–æ!\n[{track_info['name']} ‚Äî {track_info['artist']}]({spotify_link})",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await stats.log_request(
            user_id=message.from_user.id,
            username=message.from_user.username,
            source_service="yandex",
            target_service="spotify",
            track_name=f"{track_info['name']} - {track_info['artist']}",
            status="not_found"
        )
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏\n```\n{track_info['name']} - {track_info['artist']}\n```\n–≤ Spotify.",
            parse_mode=ParseMode.MARKDOWN
        )


@router.message(Command("stats"))
async def show_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        print(f"üìä –ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        user_stats = await stats.get_user_stats(message.from_user.id)
        
        total_requests = len(user_stats)
        successful = len([s for s in user_stats if s['status'] == 'success'])
        failed = len([s for s in user_stats if s['status'] == 'error'])
        not_found = len([s for s in user_stats if s['status'] == 'not_found'])
        
        stats_message = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
            f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful}\n"
            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found}\n"
            f"–û—à–∏–±–æ–∫: {failed}"
        )
        
        await message.answer(stats_message)
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}\n{traceback.format_exc()}"
        print(error_msg)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("admin_stats"))
async def show_admin_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        user_id = message.from_user.id
        print(f"üë§ –ó–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        ADMIN_IDS = [81078202]  # –í–∞—à ID
        
        if user_id not in ADMIN_IDS:
            print(f"‚õîÔ∏è –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
            
        print("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        total_stats = await stats.get_total_stats()
        stats_message = (
            f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_stats.get('unique_users', 0)}\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_stats.get('total', 0)}\n"
            f"–£—Å–ø–µ—à–Ω—ã—Ö: {total_stats.get('success', 0)}\n"
            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ: {total_stats.get('not_found', 0)}\n"
            f"–û—à–∏–±–æ–∫: {total_stats.get('error', 0)}"
        )
        
        await message.answer(stats_message)
        print(f"‚úÖ –ê–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}\n{traceback.format_exc()}"
        print(error_msg)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    try:
        me = await bot.get_me()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ! –ò–º—è –±–æ—Ç–∞: {me.full_name}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram: {e}")
        return
    
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    dp.include_router(router)
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        await dp.start_polling(bot, allowed_updates=["message"])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())



